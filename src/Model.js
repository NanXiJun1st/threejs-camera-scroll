/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import React, { useEffect, useRef, useState } from "react"
import { useGLTF, useAnimations, PerspectiveCamera } from "@react-three/drei"
import { useFrame } from "@react-three/fiber"

const color = new THREE.Color()

export default function Model({ scroll, ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('/Test01.glb')
  const { actions } = useAnimations(animations, group)
  const [hovered, set] = useState()
  const extras = { receiveShadow: true, castShadow: true, "material-envMapIntensity": 0.2 }
  useEffect(() => void (actions["Empty.001Action"].play().paused = false), [])
  useEffect(() => {
    // if (hovered) group.current.getObjectByName(hovered).material.color.set("white")
    if (hovered) group.current.getObjectByName(hovered).material.color.set("white")

    document.body.style.cursor = hovered ? "pointer" : "auto"
  }, [hovered])
  useFrame((state) => {
    actions["Empty.001Action"].time = THREE.MathUtils.lerp(actions["Empty.001Action"].time, actions["Empty.001Action"].getClip().duration * scroll.current, 0.05)
    group.current.children[0].children.forEach((child, index) => {
      child.material.color.lerp(color.set(hovered === child.name ? "tomato" : "#202020").convertSRGBToLinear(), hovered ? 0.1 : 0.05)
      const et = state.clock.elapsedTime
      child.position.y = Math.sin((et + index * 2000) / 2) * 1
      child.rotation.x = Math.sin((et + index * 2000) / 3) / 10
      child.rotation.y = Math.cos((et + index * 2000) / 2) / 10
      child.rotation.z = Math.sin((et + index * 2000) / 3) / 10
    })
  })

  return (
    <group ref={group} {...props} dispose={null}>
      <group
        onPointerOver={(e) => (e.stopPropagation(), set(e.object.name))}
        onPointerOut={(e) => (e.stopPropagation(), set(null))}
        // position={[0.06, 4.04, 0.35]}
        // scale={[0.25, 0.25, 0.25]}
        >
          <mesh name="Cone" geometry={nodes.Cone.geometry} material={materials['Material.001']} />
          <mesh name="Cube" geometry={nodes.Cube.geometry} material={materials['Material.002']} />
          <mesh name="Sphere" geometry={nodes.Sphere.geometry} material={materials['Material.003']} />
          <mesh name="Suzanne" geometry={nodes.Suzanne.geometry} material={materials['Material.004']} />
      </group>
      <group name="Camera">
      <PerspectiveCamera name="CameraMain" makeDefault far={1000} near={0.1} fov={40} rotation={[2.66, 1.5, -2.64]} >
          <directionalLight
            castShadow
            position={[10, 20, 15]}
            shadow-camera-right={8}
            shadow-camera-top={8}
            shadow-camera-left={-8}
            shadow-camera-bottom={-8}
            shadow-mapSize-width={1024}
            shadow-mapSize-height={1024}
            intensity={2}
            shadow-bias={-0.0001}
          />
          </PerspectiveCamera>
      </group>
    </group>
  )
}

useGLTF.preload('/Test01.glb')
